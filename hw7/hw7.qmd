---
title: Homework 7 - Creating a resume database
author: Austin Cahall
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

This document is a breakdown of the database of people who have skills, roles and jobs. it puts on display a few structured queries and complete tables to show what they look like.


GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-Austincahall

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

the project is a database consisting of 5 tables (people,skills,peopleskills,roles,peopleroles). these tables have been populated with data following certain rules. the names are from How I Met Your Mother.


## Crows-foot diagram

(add a description of the diagram and what the reader is seeing.)

```{mermaid}
%%| echo: false
erDiagram
    people ||--o{ peopleskills: "has"
    skills ||--o{ peopleskills: "acquires"
    people ||--o{ peopleroles: "has"
    roles ||--o{ peopleroles: "assigned_to"
    skills {
        int skills_id
        varchar(255) skills_name
        varchar(255) skills_description
        varchar(255) skills_tag
        varchar(255) skills_url
        int skills_time_commitment
    }
    people {
        int people_id
        varchar(255) people_first_name
        varchar(256) people_last_name
        varchar(255) people_email
        varchar(255) people_linkedin_url
        varchar(255) people_headshoturl
        varchar(255) people_discord_handle
        varchar(255) people_brief_bio
        date people_date_joined
    }
    peopleskills {
        int peopleskills_id
        int peopleskills_skills_id
        int peopleskills_people_id
        date peopleskills_date_acquired
    }
    roles {
        int roles_id
        varchar(255) roles_name
        int roles_sort_priority
    }
    peopleroles {
        int peopleroles_id
        int peopleroles_people_id
        int peopleroles_role_id
        date peopleroles_date_assigned
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

(here a sample query)

```{python}
sql = f"""
select * from people
"""
```


(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name
```{python}
#| echo: false
#| eval: true
sql = f"""
select people_first_name, people_last_name, people_email from people order by people_last_name;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT skills.skills_name
FROM people
JOIN peopleskills ON people.people_id = peopleskills.peopleskills_people_id
JOIN skills ON peopleskills.peopleskills_skills_id = skills.skills_id
WHERE people.people_id = 1;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.people_first_name
FROM people
JOIN peopleskills ON people.people_id = peopleskills.peopleskills_people_id
JOIN skills ON peopleskills.peopleskills_skills_id = skills.skills_id
WHERE skills_id = 6;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List people with a DEVELOPER role
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.people_id, people.people_first_name, people.people_last_name
FROM people
JOIN peopleroles ON people.people_id = peopleroles.peopleroles_people_id
JOIN roles ON peopleroles.peopleroles_role_id = roles.roles_id
WHERE roles.roles_name = 'Developer';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.people_first_name, people.people_last_name, people.people_email
FROM people
LEFT JOIN peopleskills ON people.people_id = peopleskills.peopleskills_people_id
WHERE peopleskills.peopleskills_id IS NULL;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT skills.skills_name, skills.skills_tag
FROM skills
LEFT JOIN peopleskills ON skills.skills_id = peopleskills.peopleskills_skills_id
WHERE peopleskills.peopleskills_id IS NULL;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people.people_first_name, people.people_last_name, skills.skills_name
FROM people
JOIN peopleroles ON people.people_id = peopleroles.peopleroles_people_id
JOIN roles ON peopleroles.peopleroles_role_id = roles.roles_id
LEFT JOIN peopleskills ON people.people_id = peopleskills.peopleskills_people_id
LEFT JOIN skills ON peopleskills.peopleskills_skills_id = skills.skills_id
WHERE roles.roles_name = 'Boss';
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT roles.roles_id, roles.roles_name
FROM roles
LEFT JOIN peopleroles ON roles.roles_id = peopleroles.peopleroles_role_id
WHERE peopleroles.peopleroles_id IS NULL;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

I really enjoyed this assignment especially because we could make it our own with names and such of characters while still being given plenty of structure for grading and creation. the in class work really helped me to learn about what I was typing and why it was necessary.


